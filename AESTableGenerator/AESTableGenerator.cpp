// AESTableGenerator.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <cstdio>
#include <cstdint>

constexpr int Nk = 4, Nr = 10;

constexpr uint8_t Sbox[16][16] = {
    {0x63u, 0x7cu, 0x77u, 0x7bu, 0xf2u, 0x6bu, 0x6fu, 0xc5u, 0x30u, 0x01u, 0x67u, 0x2bu, 0xfeu, 0xd7u, 0xabu, 0x76u},
    {0xcau, 0x82u, 0xc9u, 0x7du, 0xfau, 0x59u, 0x47u, 0xf0u, 0xadu, 0xd4u, 0xa2u, 0xafu, 0x9cu, 0xa4u, 0x72u, 0xc0u},
    {0xb7u, 0xfdu, 0x93u, 0x26u, 0x36u, 0x3fu, 0xf7u, 0xccu, 0x34u, 0xa5u, 0xe5u, 0xf1u, 0x71u, 0xd8u, 0x31u, 0x15u},
    {0x04u, 0xc7u, 0x23u, 0xc3u, 0x18u, 0x96u, 0x05u, 0x9au, 0x07u, 0x12u, 0x80u, 0xe2u, 0xebu, 0x27u, 0xb2u, 0x75u},
    {0x09u, 0x83u, 0x2cu, 0x1au, 0x1bu, 0x6eu, 0x5au, 0xa0u, 0x52u, 0x3bu, 0xd6u, 0xb3u, 0x29u, 0xe3u, 0x2fu, 0x84u},
    {0x53u, 0xd1u, 0x00u, 0xedu, 0x20u, 0xfcu, 0xb1u, 0x5bu, 0x6au, 0xcbu, 0xbeu, 0x39u, 0x4au, 0x4cu, 0x58u, 0xcfu},
    {0xd0u, 0xefu, 0xaau, 0xfbu, 0x43u, 0x4du, 0x33u, 0x85u, 0x45u, 0xf9u, 0x02u, 0x7fu, 0x50u, 0x3cu, 0x9fu, 0xa8u},
    {0x51u, 0xa3u, 0x40u, 0x8fu, 0x92u, 0x9du, 0x38u, 0xf5u, 0xbcu, 0xb6u, 0xdau, 0x21u, 0x10u, 0xffu, 0xf3u, 0xd2u},
    {0xcdu, 0x0cu, 0x13u, 0xecu, 0x5fu, 0x97u, 0x44u, 0x17u, 0xc4u, 0xa7u, 0x7eu, 0x3du, 0x64u, 0x5du, 0x19u, 0x73u},
    {0x60u, 0x81u, 0x4fu, 0xdcu, 0x22u, 0x2au, 0x90u, 0x88u, 0x46u, 0xeeu, 0xb8u, 0x14u, 0xdeu, 0x5eu, 0x0bu, 0xdbu},
    {0xe0u, 0x32u, 0x3au, 0x0au, 0x49u, 0x06u, 0x24u, 0x5cu, 0xc2u, 0xd3u, 0xacu, 0x62u, 0x91u, 0x95u, 0xe4u, 0x79u},
    {0xe7u, 0xc8u, 0x37u, 0x6du, 0x8du, 0xd5u, 0x4eu, 0xa9u, 0x6cu, 0x56u, 0xf4u, 0xeau, 0x65u, 0x7au, 0xaeu, 0x08u},
    {0xbau, 0x78u, 0x25u, 0x2eu, 0x1cu, 0xa6u, 0xb4u, 0xc6u, 0xe8u, 0xddu, 0x74u, 0x1fu, 0x4bu, 0xbdu, 0x8bu, 0x8au},
    {0x70u, 0x3eu, 0xb5u, 0x66u, 0x48u, 0x03u, 0xf6u, 0x0eu, 0x61u, 0x35u, 0x57u, 0xb9u, 0x86u, 0xc1u, 0x1du, 0x9eu},
    {0xe1u, 0xf8u, 0x98u, 0x11u, 0x69u, 0xd9u, 0x8eu, 0x94u, 0x9bu, 0x1eu, 0x87u, 0xe9u, 0xceu, 0x55u, 0x28u, 0xdfu},
    {0x8cu, 0xa1u, 0x89u, 0x0du, 0xbfu, 0xe6u, 0x42u, 0x68u, 0x41u, 0x99u, 0x2du, 0x0fu, 0xb0u, 0x54u, 0xbbu, 0x16u}
};

constexpr uint8_t gf_mul[256][6] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0x02, 0x03, 0x09, 0x0b, 0x0d, 0x0e },
  { 0x04, 0x06, 0x12, 0x16, 0x1a, 0x1c }, { 0x06, 0x05, 0x1b, 0x1d, 0x17, 0x12 },
  { 0x08, 0x0c, 0x24, 0x2c, 0x34, 0x38 }, { 0x0a, 0x0f, 0x2d, 0x27, 0x39, 0x36 },
  { 0x0c, 0x0a, 0x36, 0x3a, 0x2e, 0x24 }, { 0x0e, 0x09, 0x3f, 0x31, 0x23, 0x2a },
  { 0x10, 0x18, 0x48, 0x58, 0x68, 0x70 }, { 0x12, 0x1b, 0x41, 0x53, 0x65, 0x7e },
  { 0x14, 0x1e, 0x5a, 0x4e, 0x72, 0x6c }, { 0x16, 0x1d, 0x53, 0x45, 0x7f, 0x62 },
  { 0x18, 0x14, 0x6c, 0x74, 0x5c, 0x48 }, { 0x1a, 0x17, 0x65, 0x7f, 0x51, 0x46 },
  { 0x1c, 0x12, 0x7e, 0x62, 0x46, 0x54 }, { 0x1e, 0x11, 0x77, 0x69, 0x4b, 0x5a },
  { 0x20, 0x30, 0x90, 0xb0, 0xd0, 0xe0 }, { 0x22, 0x33, 0x99, 0xbb, 0xdd, 0xee },
  { 0x24, 0x36, 0x82, 0xa6, 0xca, 0xfc }, { 0x26, 0x35, 0x8b, 0xad, 0xc7, 0xf2 },
  { 0x28, 0x3c, 0xb4, 0x9c, 0xe4, 0xd8 }, { 0x2a, 0x3f, 0xbd, 0x97, 0xe9, 0xd6 },
  { 0x2c, 0x3a, 0xa6, 0x8a, 0xfe, 0xc4 }, { 0x2e, 0x39, 0xaf, 0x81, 0xf3, 0xca },
  { 0x30, 0x28, 0xd8, 0xe8, 0xb8, 0x90 }, { 0x32, 0x2b, 0xd1, 0xe3, 0xb5, 0x9e },
  { 0x34, 0x2e, 0xca, 0xfe, 0xa2, 0x8c }, { 0x36, 0x2d, 0xc3, 0xf5, 0xaf, 0x82 },
  { 0x38, 0x24, 0xfc, 0xc4, 0x8c, 0xa8 }, { 0x3a, 0x27, 0xf5, 0xcf, 0x81, 0xa6 },
  { 0x3c, 0x22, 0xee, 0xd2, 0x96, 0xb4 }, { 0x3e, 0x21, 0xe7, 0xd9, 0x9b, 0xba },
  { 0x40, 0x60, 0x3b, 0x7b, 0xbb, 0xdb }, { 0x42, 0x63, 0x32, 0x70, 0xb6, 0xd5 },
  { 0x44, 0x66, 0x29, 0x6d, 0xa1, 0xc7 }, { 0x46, 0x65, 0x20, 0x66, 0xac, 0xc9 },
  { 0x48, 0x6c, 0x1f, 0x57, 0x8f, 0xe3 }, { 0x4a, 0x6f, 0x16, 0x5c, 0x82, 0xed },
  { 0x4c, 0x6a, 0x0d, 0x41, 0x95, 0xff }, { 0x4e, 0x69, 0x04, 0x4a, 0x98, 0xf1 },
  { 0x50, 0x78, 0x73, 0x23, 0xd3, 0xab }, { 0x52, 0x7b, 0x7a, 0x28, 0xde, 0xa5 },
  { 0x54, 0x7e, 0x61, 0x35, 0xc9, 0xb7 }, { 0x56, 0x7d, 0x68, 0x3e, 0xc4, 0xb9 },
  { 0x58, 0x74, 0x57, 0x0f, 0xe7, 0x93 }, { 0x5a, 0x77, 0x5e, 0x04, 0xea, 0x9d },
  { 0x5c, 0x72, 0x45, 0x19, 0xfd, 0x8f }, { 0x5e, 0x71, 0x4c, 0x12, 0xf0, 0x81 },
  { 0x60, 0x50, 0xab, 0xcb, 0x6b, 0x3b }, { 0x62, 0x53, 0xa2, 0xc0, 0x66, 0x35 },
  { 0x64, 0x56, 0xb9, 0xdd, 0x71, 0x27 }, { 0x66, 0x55, 0xb0, 0xd6, 0x7c, 0x29 },
  { 0x68, 0x5c, 0x8f, 0xe7, 0x5f, 0x03 }, { 0x6a, 0x5f, 0x86, 0xec, 0x52, 0x0d },
  { 0x6c, 0x5a, 0x9d, 0xf1, 0x45, 0x1f }, { 0x6e, 0x59, 0x94, 0xfa, 0x48, 0x11 },
  { 0x70, 0x48, 0xe3, 0x93, 0x03, 0x4b }, { 0x72, 0x4b, 0xea, 0x98, 0x0e, 0x45 },
  { 0x74, 0x4e, 0xf1, 0x85, 0x19, 0x57 }, { 0x76, 0x4d, 0xf8, 0x8e, 0x14, 0x59 },
  { 0x78, 0x44, 0xc7, 0xbf, 0x37, 0x73 }, { 0x7a, 0x47, 0xce, 0xb4, 0x3a, 0x7d },
  { 0x7c, 0x42, 0xd5, 0xa9, 0x2d, 0x6f }, { 0x7e, 0x41, 0xdc, 0xa2, 0x20, 0x61 },
  { 0x80, 0xc0, 0x76, 0xf6, 0x6d, 0xad }, { 0x82, 0xc3, 0x7f, 0xfd, 0x60, 0xa3 },
  { 0x84, 0xc6, 0x64, 0xe0, 0x77, 0xb1 }, { 0x86, 0xc5, 0x6d, 0xeb, 0x7a, 0xbf },
  { 0x88, 0xcc, 0x52, 0xda, 0x59, 0x95 }, { 0x8a, 0xcf, 0x5b, 0xd1, 0x54, 0x9b },
  { 0x8c, 0xca, 0x40, 0xcc, 0x43, 0x89 }, { 0x8e, 0xc9, 0x49, 0xc7, 0x4e, 0x87 },
  { 0x90, 0xd8, 0x3e, 0xae, 0x05, 0xdd }, { 0x92, 0xdb, 0x37, 0xa5, 0x08, 0xd3 },
  { 0x94, 0xde, 0x2c, 0xb8, 0x1f, 0xc1 }, { 0x96, 0xdd, 0x25, 0xb3, 0x12, 0xcf },
  { 0x98, 0xd4, 0x1a, 0x82, 0x31, 0xe5 }, { 0x9a, 0xd7, 0x13, 0x89, 0x3c, 0xeb },
  { 0x9c, 0xd2, 0x08, 0x94, 0x2b, 0xf9 }, { 0x9e, 0xd1, 0x01, 0x9f, 0x26, 0xf7 },
  { 0xa0, 0xf0, 0xe6, 0x46, 0xbd, 0x4d }, { 0xa2, 0xf3, 0xef, 0x4d, 0xb0, 0x43 },
  { 0xa4, 0xf6, 0xf4, 0x50, 0xa7, 0x51 }, { 0xa6, 0xf5, 0xfd, 0x5b, 0xaa, 0x5f },
  { 0xa8, 0xfc, 0xc2, 0x6a, 0x89, 0x75 }, { 0xaa, 0xff, 0xcb, 0x61, 0x84, 0x7b },
  { 0xac, 0xfa, 0xd0, 0x7c, 0x93, 0x69 }, { 0xae, 0xf9, 0xd9, 0x77, 0x9e, 0x67 },
  { 0xb0, 0xe8, 0xae, 0x1e, 0xd5, 0x3d }, { 0xb2, 0xeb, 0xa7, 0x15, 0xd8, 0x33 },
  { 0xb4, 0xee, 0xbc, 0x08, 0xcf, 0x21 }, { 0xb6, 0xed, 0xb5, 0x03, 0xc2, 0x2f },
  { 0xb8, 0xe4, 0x8a, 0x32, 0xe1, 0x05 }, { 0xba, 0xe7, 0x83, 0x39, 0xec, 0x0b },
  { 0xbc, 0xe2, 0x98, 0x24, 0xfb, 0x19 }, { 0xbe, 0xe1, 0x91, 0x2f, 0xf6, 0x17 },
  { 0xc0, 0xa0, 0x4d, 0x8d, 0xd6, 0x76 }, { 0xc2, 0xa3, 0x44, 0x86, 0xdb, 0x78 },
  { 0xc4, 0xa6, 0x5f, 0x9b, 0xcc, 0x6a }, { 0xc6, 0xa5, 0x56, 0x90, 0xc1, 0x64 },
  { 0xc8, 0xac, 0x69, 0xa1, 0xe2, 0x4e }, { 0xca, 0xaf, 0x60, 0xaa, 0xef, 0x40 },
  { 0xcc, 0xaa, 0x7b, 0xb7, 0xf8, 0x52 }, { 0xce, 0xa9, 0x72, 0xbc, 0xf5, 0x5c },
  { 0xd0, 0xb8, 0x05, 0xd5, 0xbe, 0x06 }, { 0xd2, 0xbb, 0x0c, 0xde, 0xb3, 0x08 },
  { 0xd4, 0xbe, 0x17, 0xc3, 0xa4, 0x1a }, { 0xd6, 0xbd, 0x1e, 0xc8, 0xa9, 0x14 },
  { 0xd8, 0xb4, 0x21, 0xf9, 0x8a, 0x3e }, { 0xda, 0xb7, 0x28, 0xf2, 0x87, 0x30 },
  { 0xdc, 0xb2, 0x33, 0xef, 0x90, 0x22 }, { 0xde, 0xb1, 0x3a, 0xe4, 0x9d, 0x2c },
  { 0xe0, 0x90, 0xdd, 0x3d, 0x06, 0x96 }, { 0xe2, 0x93, 0xd4, 0x36, 0x0b, 0x98 },
  { 0xe4, 0x96, 0xcf, 0x2b, 0x1c, 0x8a }, { 0xe6, 0x95, 0xc6, 0x20, 0x11, 0x84 },
  { 0xe8, 0x9c, 0xf9, 0x11, 0x32, 0xae }, { 0xea, 0x9f, 0xf0, 0x1a, 0x3f, 0xa0 },
  { 0xec, 0x9a, 0xeb, 0x07, 0x28, 0xb2 }, { 0xee, 0x99, 0xe2, 0x0c, 0x25, 0xbc },
  { 0xf0, 0x88, 0x95, 0x65, 0x6e, 0xe6 }, { 0xf2, 0x8b, 0x9c, 0x6e, 0x63, 0xe8 },
  { 0xf4, 0x8e, 0x87, 0x73, 0x74, 0xfa }, { 0xf6, 0x8d, 0x8e, 0x78, 0x79, 0xf4 },
  { 0xf8, 0x84, 0xb1, 0x49, 0x5a, 0xde }, { 0xfa, 0x87, 0xb8, 0x42, 0x57, 0xd0 },
  { 0xfc, 0x82, 0xa3, 0x5f, 0x40, 0xc2 }, { 0xfe, 0x81, 0xaa, 0x54, 0x4d, 0xcc },
  { 0x1b, 0x9b, 0xec, 0xf7, 0xda, 0x41 }, { 0x19, 0x98, 0xe5, 0xfc, 0xd7, 0x4f },
  { 0x1f, 0x9d, 0xfe, 0xe1, 0xc0, 0x5d }, { 0x1d, 0x9e, 0xf7, 0xea, 0xcd, 0x53 },
  { 0x13, 0x97, 0xc8, 0xdb, 0xee, 0x79 }, { 0x11, 0x94, 0xc1, 0xd0, 0xe3, 0x77 },
  { 0x17, 0x91, 0xda, 0xcd, 0xf4, 0x65 }, { 0x15, 0x92, 0xd3, 0xc6, 0xf9, 0x6b },
  { 0x0b, 0x83, 0xa4, 0xaf, 0xb2, 0x31 }, { 0x09, 0x80, 0xad, 0xa4, 0xbf, 0x3f },
  { 0x0f, 0x85, 0xb6, 0xb9, 0xa8, 0x2d }, { 0x0d, 0x86, 0xbf, 0xb2, 0xa5, 0x23 },
  { 0x03, 0x8f, 0x80, 0x83, 0x86, 0x09 }, { 0x01, 0x8c, 0x89, 0x88, 0x8b, 0x07 },
  { 0x07, 0x89, 0x92, 0x95, 0x9c, 0x15 }, { 0x05, 0x8a, 0x9b, 0x9e, 0x91, 0x1b },
  { 0x3b, 0xab, 0x7c, 0x47, 0x0a, 0xa1 }, { 0x39, 0xa8, 0x75, 0x4c, 0x07, 0xaf },
  { 0x3f, 0xad, 0x6e, 0x51, 0x10, 0xbd }, { 0x3d, 0xae, 0x67, 0x5a, 0x1d, 0xb3 },
  { 0x33, 0xa7, 0x58, 0x6b, 0x3e, 0x99 }, { 0x31, 0xa4, 0x51, 0x60, 0x33, 0x97 },
  { 0x37, 0xa1, 0x4a, 0x7d, 0x24, 0x85 }, { 0x35, 0xa2, 0x43, 0x76, 0x29, 0x8b },
  { 0x2b, 0xb3, 0x34, 0x1f, 0x62, 0xd1 }, { 0x29, 0xb0, 0x3d, 0x14, 0x6f, 0xdf },
  { 0x2f, 0xb5, 0x26, 0x09, 0x78, 0xcd }, { 0x2d, 0xb6, 0x2f, 0x02, 0x75, 0xc3 },
  { 0x23, 0xbf, 0x10, 0x33, 0x56, 0xe9 }, { 0x21, 0xbc, 0x19, 0x38, 0x5b, 0xe7 },
  { 0x27, 0xb9, 0x02, 0x25, 0x4c, 0xf5 }, { 0x25, 0xba, 0x0b, 0x2e, 0x41, 0xfb },
  { 0x5b, 0xfb, 0xd7, 0x8c, 0x61, 0x9a }, { 0x59, 0xf8, 0xde, 0x87, 0x6c, 0x94 },
  { 0x5f, 0xfd, 0xc5, 0x9a, 0x7b, 0x86 }, { 0x5d, 0xfe, 0xcc, 0x91, 0x76, 0x88 },
  { 0x53, 0xf7, 0xf3, 0xa0, 0x55, 0xa2 }, { 0x51, 0xf4, 0xfa, 0xab, 0x58, 0xac },
  { 0x57, 0xf1, 0xe1, 0xb6, 0x4f, 0xbe }, { 0x55, 0xf2, 0xe8, 0xbd, 0x42, 0xb0 },
  { 0x4b, 0xe3, 0x9f, 0xd4, 0x09, 0xea }, { 0x49, 0xe0, 0x96, 0xdf, 0x04, 0xe4 },
  { 0x4f, 0xe5, 0x8d, 0xc2, 0x13, 0xf6 }, { 0x4d, 0xe6, 0x84, 0xc9, 0x1e, 0xf8 },
  { 0x43, 0xef, 0xbb, 0xf8, 0x3d, 0xd2 }, { 0x41, 0xec, 0xb2, 0xf3, 0x30, 0xdc },
  { 0x47, 0xe9, 0xa9, 0xee, 0x27, 0xce }, { 0x45, 0xea, 0xa0, 0xe5, 0x2a, 0xc0 },
  { 0x7b, 0xcb, 0x47, 0x3c, 0xb1, 0x7a }, { 0x79, 0xc8, 0x4e, 0x37, 0xbc, 0x74 },
  { 0x7f, 0xcd, 0x55, 0x2a, 0xab, 0x66 }, { 0x7d, 0xce, 0x5c, 0x21, 0xa6, 0x68 },
  { 0x73, 0xc7, 0x63, 0x10, 0x85, 0x42 }, { 0x71, 0xc4, 0x6a, 0x1b, 0x88, 0x4c },
  { 0x77, 0xc1, 0x71, 0x06, 0x9f, 0x5e }, { 0x75, 0xc2, 0x78, 0x0d, 0x92, 0x50 },
  { 0x6b, 0xd3, 0x0f, 0x64, 0xd9, 0x0a }, { 0x69, 0xd0, 0x06, 0x6f, 0xd4, 0x04 },
  { 0x6f, 0xd5, 0x1d, 0x72, 0xc3, 0x16 }, { 0x6d, 0xd6, 0x14, 0x79, 0xce, 0x18 },
  { 0x63, 0xdf, 0x2b, 0x48, 0xed, 0x32 }, { 0x61, 0xdc, 0x22, 0x43, 0xe0, 0x3c },
  { 0x67, 0xd9, 0x39, 0x5e, 0xf7, 0x2e }, { 0x65, 0xda, 0x30, 0x55, 0xfa, 0x20 },
  { 0x9b, 0x5b, 0x9a, 0x01, 0xb7, 0xec }, { 0x99, 0x58, 0x93, 0x0a, 0xba, 0xe2 },
  { 0x9f, 0x5d, 0x88, 0x17, 0xad, 0xf0 }, { 0x9d, 0x5e, 0x81, 0x1c, 0xa0, 0xfe },
  { 0x93, 0x57, 0xbe, 0x2d, 0x83, 0xd4 }, { 0x91, 0x54, 0xb7, 0x26, 0x8e, 0xda },
  { 0x97, 0x51, 0xac, 0x3b, 0x99, 0xc8 }, { 0x95, 0x52, 0xa5, 0x30, 0x94, 0xc6 },
  { 0x8b, 0x43, 0xd2, 0x59, 0xdf, 0x9c }, { 0x89, 0x40, 0xdb, 0x52, 0xd2, 0x92 },
  { 0x8f, 0x45, 0xc0, 0x4f, 0xc5, 0x80 }, { 0x8d, 0x46, 0xc9, 0x44, 0xc8, 0x8e },
  { 0x83, 0x4f, 0xf6, 0x75, 0xeb, 0xa4 }, { 0x81, 0x4c, 0xff, 0x7e, 0xe6, 0xaa },
  { 0x87, 0x49, 0xe4, 0x63, 0xf1, 0xb8 }, { 0x85, 0x4a, 0xed, 0x68, 0xfc, 0xb6 },
  { 0xbb, 0x6b, 0x0a, 0xb1, 0x67, 0x0c }, { 0xb9, 0x68, 0x03, 0xba, 0x6a, 0x02 },
  { 0xbf, 0x6d, 0x18, 0xa7, 0x7d, 0x10 }, { 0xbd, 0x6e, 0x11, 0xac, 0x70, 0x1e },
  { 0xb3, 0x67, 0x2e, 0x9d, 0x53, 0x34 }, { 0xb1, 0x64, 0x27, 0x96, 0x5e, 0x3a },
  { 0xb7, 0x61, 0x3c, 0x8b, 0x49, 0x28 }, { 0xb5, 0x62, 0x35, 0x80, 0x44, 0x26 },
  { 0xab, 0x73, 0x42, 0xe9, 0x0f, 0x7c }, { 0xa9, 0x70, 0x4b, 0xe2, 0x02, 0x72 },
  { 0xaf, 0x75, 0x50, 0xff, 0x15, 0x60 }, { 0xad, 0x76, 0x59, 0xf4, 0x18, 0x6e },
  { 0xa3, 0x7f, 0x66, 0xc5, 0x3b, 0x44 }, { 0xa1, 0x7c, 0x6f, 0xce, 0x36, 0x4a },
  { 0xa7, 0x79, 0x74, 0xd3, 0x21, 0x58 }, { 0xa5, 0x7a, 0x7d, 0xd8, 0x2c, 0x56 },
  { 0xdb, 0x3b, 0xa1, 0x7a, 0x0c, 0x37 }, { 0xd9, 0x38, 0xa8, 0x71, 0x01, 0x39 },
  { 0xdf, 0x3d, 0xb3, 0x6c, 0x16, 0x2b }, { 0xdd, 0x3e, 0xba, 0x67, 0x1b, 0x25 },
  { 0xd3, 0x37, 0x85, 0x56, 0x38, 0x0f }, { 0xd1, 0x34, 0x8c, 0x5d, 0x35, 0x01 },
  { 0xd7, 0x31, 0x97, 0x40, 0x22, 0x13 }, { 0xd5, 0x32, 0x9e, 0x4b, 0x2f, 0x1d },
  { 0xcb, 0x23, 0xe9, 0x22, 0x64, 0x47 }, { 0xc9, 0x20, 0xe0, 0x29, 0x69, 0x49 },
  { 0xcf, 0x25, 0xfb, 0x34, 0x7e, 0x5b }, { 0xcd, 0x26, 0xf2, 0x3f, 0x73, 0x55 },
  { 0xc3, 0x2f, 0xcd, 0x0e, 0x50, 0x7f }, { 0xc1, 0x2c, 0xc4, 0x05, 0x5d, 0x71 },
  { 0xc7, 0x29, 0xdf, 0x18, 0x4a, 0x63 }, { 0xc5, 0x2a, 0xd6, 0x13, 0x47, 0x6d },
  { 0xfb, 0x0b, 0x31, 0xca, 0xdc, 0xd7 }, { 0xf9, 0x08, 0x38, 0xc1, 0xd1, 0xd9 },
  { 0xff, 0x0d, 0x23, 0xdc, 0xc6, 0xcb }, { 0xfd, 0x0e, 0x2a, 0xd7, 0xcb, 0xc5 },
  { 0xf3, 0x07, 0x15, 0xe6, 0xe8, 0xef }, { 0xf1, 0x04, 0x1c, 0xed, 0xe5, 0xe1 },
  { 0xf7, 0x01, 0x07, 0xf0, 0xf2, 0xf3 }, { 0xf5, 0x02, 0x0e, 0xfb, 0xff, 0xfd },
  { 0xeb, 0x13, 0x79, 0x92, 0xb4, 0xa7 }, { 0xe9, 0x10, 0x70, 0x99, 0xb9, 0xa9 },
  { 0xef, 0x15, 0x6b, 0x84, 0xae, 0xbb }, { 0xed, 0x16, 0x62, 0x8f, 0xa3, 0xb5 },
  { 0xe3, 0x1f, 0x5d, 0xbe, 0x80, 0x9f }, { 0xe1, 0x1c, 0x54, 0xb5, 0x8d, 0x91 },
  { 0xe7, 0x19, 0x4f, 0xa8, 0x9a, 0x83 }, { 0xe5, 0x1a, 0x46, 0xa3, 0x97, 0x8d }
};

constexpr uint32_t SubWord(uint32_t word)
{
    return (uint32_t)Sbox[(word >> 4) & 0xf][word & 0xf]
        + (uint32_t)(Sbox[(word >> 12) & 0xf][(word >> 8) & 0xf] << 8)
        + (uint32_t)(Sbox[(word >> 20) & 0xf][(word >> 16) & 0xf] << 16)
        + (uint32_t)(Sbox[(word >> 18) & 0xf][(word >> 24) & 0xf] << 24);
}

constexpr uint32_t RotWord(uint32_t x)
{
    return (x << 8) | (x >> 24);
}

inline void ExpandKeys(const uint8_t *key, uint32_t *w)
{
    constexpr int Nb = 4;
    constexpr uint32_t RCon[] = {
        0x01000000,0x02000000,0x04000000,0x08000000,
        0x10000000,0x20000000,0x40000000,0x80000000,
        0x1b000000,0x36000000,0x6c000000,0xd8000000,
        0xab000000,0x4d000000,0x9a000000
    };

    for (int i = 0; i < Nk; ++i)
    {
        w[i] = (key[4 * i] << 24)
            | (key[4 * i + 1] << 16)
            | (key[4 * i + 2] << 8)
            | (key[4 * i + 3]);
    }

    for (int i = Nk; i < Nb*(Nr + 1); ++i)
    {
        uint32_t temp = w[i - 1];
        if ((i%Nk) == 0)
        {
            temp = SubWord(RotWord(temp)) ^ RCon[(i - 1) / Nk];
        }
        else if (Nk > 6 && (i%Nk) == 4)
        {
            temp = SubWord(temp);
        }
        w[i] = w[i - Nk] ^ temp;
    }
}

void GenerateXorTable(FILE *out)
{
    uint8_t Xor[96][16][16];
    for (int r = 0; r < Nr - 1; ++r)
        for (int n = 0; n < 96; ++n)
            for (int i = 0; i < 16; ++i)
                for (int j = 0; j < 16; ++j)
                    Xor[n][i][j] = i ^ j;

    fprintf(out, "constexpr uint8_t Xor[%d][96][16][16] = {\n", Nr - 1);
    for (int r = 0; r < Nr - 1; ++r)
    {
        fprintf(out, "{\n");
        for (int n = 0; n < 96; ++n)
        {
            fprintf(out, "    {\n");
            for (int i = 0; i < 16; ++i)
            {
                fprintf(out, "        {");
                for (int j = 0; j < 16; ++j)
                    fprintf(out, "0x%02x,", Xor[n][i][j]);
                fprintf(out, "},\n");
            }
            fprintf(out, "    },\n");
        }
        fprintf(out, "},\n");
    }
    fprintf(out, "};\n");
}

inline void AddRoundKeyAfterShift(uint8_t state[16], const uint32_t roundkey[4])
{
    for (unsigned int i = 0; i < 4; ++i)
    {
        for (unsigned int j = 0; j < 4; ++j)
        {
            state[i * 4 + j] ^= roundkey[(i + j) % 4] >> ((3 - j) * 8);
        }
    }
}

inline void SubBytes(uint8_t state[16])
{
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            state[i * 4 + j] = Sbox[state[i * 4 + j] >> 4][state[i * 4 + j] & 0xf];
        }
    }
}

inline void AddRoundKey(uint8_t state[16], const uint32_t roundkey[4])
{
    for (unsigned int i = 0; i < 4; ++i)
    {
        for (unsigned int j = 0; j < 4; ++j)
        {
            state[i * 4 + j] ^= roundkey[i] >> ((3 - j) * 8);
        }
    }
}

void CalcTbox(const uint32_t *roundkey, uint8_t Tbox[][16][256])
{
    for (int r = 0; r < Nr; ++r)
    {
        for (int x = 0; x < 256; ++x)
        {
            uint8_t state[16] = {
                (uint8_t)x,(uint8_t)x,(uint8_t)x,(uint8_t)x,
                (uint8_t)x,(uint8_t)x,(uint8_t)x,(uint8_t)x,
                (uint8_t)x,(uint8_t)x,(uint8_t)x,(uint8_t)x,
                (uint8_t)x,(uint8_t)x,(uint8_t)x,(uint8_t)x
            };
            AddRoundKeyAfterShift(state, &roundkey[r * 4]);
            SubBytes(state);
            if (r == Nr - 1)
            {
                AddRoundKey(state, &roundkey[4 * Nr]);
            }
            for (int i = 0; i < 16; ++i)
            {
                Tbox[r][i][x] = state[i];
            }
        }
    }
}

void CalcTy(uint8_t Ty[4][256][4])
{
    for(int x=0;x<256;++x)
    {
        Ty[0][x][0] = gf_mul[x][0];
        Ty[0][x][1] = gf_mul[x][1];
        Ty[0][x][2] = x;
        Ty[0][x][3] = x;

        Ty[1][x][0] = x;
        Ty[1][x][1] = gf_mul[x][0];
        Ty[1][x][2] = gf_mul[x][1];
        Ty[1][x][3] = x;

        Ty[2][x][0] = x;
        Ty[2][x][1] = x;
        Ty[2][x][2] = gf_mul[x][0];
        Ty[2][x][3] = gf_mul[x][1];

        Ty[3][x][0] = gf_mul[x][1];
        Ty[3][x][1] = x;
        Ty[3][x][2] = x;
        Ty[3][x][3] = gf_mul[x][0];
    }
}

void CalcTybox(const uint32_t *roundkey, uint32_t Tybox[][16][256], uint8_t Tboxlast[16][256], uint32_t MBL[][16][256], bool enableL, bool enableMB)
{
    uint8_t Tbox[Nr][16][256];
    uint8_t Ty[4][256][4];

    CalcTbox(roundkey, Tbox);
    CalcTy(Ty);
}

void GenerateWBCTable(FILE *out, const uint32_t *roundkey)
{
    uint32_t Tybox[Nr - 1][16][256];
    uint8_t Tboxlast[16][256];
    uint32_t MBL[Nr - 1][16][256];

    CalcTybox(roundkey, Tybox, Tboxlast, MBL, true, true);
}

void GenerateTable(const uint8_t key[16])
{
    uint32_t *roundKey = new uint32_t[Nr * 4 + 4];

    ExpandKeys(key, roundKey);

    FILE *out = fopen("WhiteboxAESTable.h", "wb");
    fprintf(out, "#pragma once\nconstexpr int Nr = %d;\n", Nr);

    GenerateXorTable(out);

    GenerateWBCTable(out, roundKey);

    fflush(out);
    fclose(out);
}

int main()
{
    uint8_t key[16] = { 0 };
    GenerateTable(key);
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
